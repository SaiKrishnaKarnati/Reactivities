{"version":3,"file":"mobxreactlite.cjs.development.js","sources":["../src/assertEnvironment.ts","../src/staticRendering.ts","../src/observerBatching.ts","../src/printDebugValue.ts","../src/reactionCleanupTracking.ts","../src/utils.ts","../src/useObserver.ts","../src/observer.ts","../src/ObserverComponent.ts","../src/useAsObservableSource.ts","../src/useLocalStore.ts"],"sourcesContent":["import { spy } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!spy) {\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\")\n}\n","let globalIsUsingStaticRendering = false\n\nexport function useStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { configure } from \"mobx\"\n\ninterface IBatchedUpdates {\n    batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void\n    batchedUpdates<A>(callback: (a: A) => any, a: A): void\n    batchedUpdates(callback: () => any): void\n}\n\nlet observerBatchingConfigured = false\n\nexport const observerBatching = (reactionScheduler?: IBatchedUpdates) => {\n    if (typeof reactionScheduler === \"function\") {\n        configure({ reactionScheduler })\n    }\n    observerBatchingConfigured = true\n}\n\nexport const observerBatchingOptOut = () => {\n    configure({ reactionScheduler: undefined })\n    observerBatchingConfigured = true\n}\n\nexport const isObserverBatched = () => observerBatchingConfigured\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted?: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount?: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    for (const ref of uncommittedReactionRefs) {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    }\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","import { useCallback, useEffect, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useUnmount(fn: () => void) {\n    useEffect(() => fn, EMPTY_ARRAY)\n}\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, [])\n\n    return update\n}\n\nexport function isPlainObject(value: any): value is object {\n    if (!value || typeof value !== \"object\") {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    return !proto || proto === Object.prototype\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { isObserverBatched } from \"./observerBatching\"\nimport { printDebugValue } from \"./printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils\"\n\nexport type ForceUpdateHook = () => () => void\n\nexport interface IUseObserverOptions {\n    useForceUpdate?: ForceUpdateHook\n}\n\nconst EMPTY_OBJECT = {}\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nlet warnedAboutBatching = false\n\nexport function useObserver<T>(\n    fn: () => T,\n    baseComponentName: string = \"observed\",\n    options: IUseObserverOptions = EMPTY_OBJECT\n): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    if (__DEV__ && !warnedAboutBatching && !isObserverBatched()) {\n        console.warn(\n            `[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching`\n        )\n        warnedAboutBatching = true\n    }\n\n    const wantedForceUpdateHook = options.useForceUpdate || useForceUpdate\n    const forceUpdate = wantedForceUpdateHook()\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction.dispose()\n                reactionTrackingRef.current = null\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n    if (exception) {\n        throw exception // re-throw any exceptions catched during rendering\n    }\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & React.FunctionComponent\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not intested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (Reflect.has(base, key) && !hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement<any>\n    render?(): React.ReactElement<any>\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, runInAction } from \"mobx\"\nimport React from \"react\"\n\nimport { isPlainObject } from \"./utils\"\n\nexport function useAsObservableSourceInternal<TSource>(\n    current: TSource,\n    usedByLocalStore: boolean\n): TSource {\n    const culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\"\n    if (usedByLocalStore && current === undefined) {\n        return undefined as any\n    }\n    if (process.env.NODE_ENV !== \"production\" && !isPlainObject(current)) {\n        throw new Error(\n            `${culprit} expects a plain object as ${usedByLocalStore ? \"second\" : \"first\"} argument`\n        )\n    }\n\n    const [res] = React.useState(() => observable(current, {}, { deep: false }))\n    if (\n        process.env.NODE_ENV !== \"production\" &&\n        Object.keys(res).length !== Object.keys(current).length\n    ) {\n        throw new Error(`the shape of objects passed to ${culprit} should be stable`)\n    }\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n\nexport function useAsObservableSource<TSource>(current: TSource): TSource {\n    return useAsObservableSourceInternal(current, false)\n}\n","import { observable, runInAction, transaction } from \"mobx\"\nimport React from \"react\"\n\nimport { useAsObservableSourceInternal } from \"./useAsObservableSource\"\nimport { isPlainObject } from \"./utils\"\n\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object = any>(\n    initializer: (source: TSource) => TStore,\n    current?: TSource\n): TStore {\n    const source = useAsObservableSourceInternal<TSource | undefined>(current, true)\n\n    return React.useState(() => {\n        const local = observable(initializer(source as TSource))\n        if (isPlainObject(local)) {\n            runInAction(() => {\n                Object.keys(local).forEach(key => {\n                    const value = local[key]\n                    if (typeof value === \"function\") {\n                        // @ts-ignore No idea why ts2536 is popping out here\n                        local[key] = wrapInTransaction(value, local)\n                    }\n                })\n            })\n        }\n        return local\n    })[0]\n}\n\n// tslint:disable-next-line: ban-types\nfunction wrapInTransaction(fn: Function, context: object) {\n    return (...args: unknown[]) => {\n        return transaction(() => fn.apply(context, args))\n    }\n}\n"],"names":["useState","Error","spy","globalIsUsingStaticRendering","useStaticRendering","enable","isUsingStaticRendering","observerBatchingConfigured","observerBatching","reactionScheduler","configure","observerBatchingOptOut","undefined","isObserverBatched","printDebugValue","v","getDependencyTree","createTrackingData","reaction","trackingData","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","uncommittedReactionRefs","Set","reactionCleanupHandle","ensureCleanupTimerRunning","setTimeout","cleanUncommittedReactions","scheduleCleanupOfReactionIfLeaked","ref","add","recordReactionAsCommitted","reactionRef","delete","tracking","current","dispose","size","useForceUpdate","setTick","update","useCallback","tick","isPlainObject","value","proto","Object","getPrototypeOf","prototype","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","warnedAboutBatching","useObserver","fn","options","console","warn","wantedForceUpdateHook","forceUpdate","reactionTrackingRef","React","useRef","newReaction","Reaction","mounted","useDebugValue","useEffect","Infinity","rendering","exception","track","e","observer","baseComponent","realOptions","forwardRef","displayName","name","wrappedComponent","props","memoComponent","memo","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","keys","forEach","key","Reflect","has","defineProperty","getOwnPropertyDescriptor","ObserverComponent","children","component","propTypes","ObserverPropsCheck","componentName","location","propFullName","extraKey","hasProp","hasExtraProp","useAsObservableSourceInternal","usedByLocalStore","culprit","process","observable","deep","res","length","runInAction","assign","useAsObservableSource","useLocalStore","initializer","source","local","wrapInTransaction","context","args","transaction","apply"],"mappings":"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"}